#!/usr/bin/perl -w
### Filter the Reads with Q-scores. Separate into two files, One reads with high q-score, another low q-socre.
### Input : Threshold of q-score
###### Output: fastq format files
###					High q-score file (whole Reads or trimmed Reads, for building high q-score bloom filter)
###					High q-score file (whole Reads w/o the trimmed, subset of the above)
###					Low q-socre file (whole Reads)
###
### Definition of Low q-score Reads:
###              Reads with any bp in the reads with low quality (< threshold).
###
use strict;
use warnings;
sub print_seq($$$$); 
sub read_entry();

my($file1,$file2,$i1,$i2);
my($name1, $seq1,$qual1,$name2,$seq2,$qual2,$read_len,$flag);
my $tupleSize = 25;
my $threshold = 25;
my $p1_lowqual = 0;
my $p2_lowqual = 0;
my $debug = 0;


if ($#ARGV < 0) {
  print "usage: trimfqpe <pair1_file> <pair2_file> <k-mer_size> <quality_threshold>\n";
  exit(0);
}

if ($#ARGV >= 0) {
	$file1 = shift @ARGV;	
}

if ($#ARGV >= 0) {
	$file2 = shift @ARGV;	
}

if ($#ARGV >= 0) {
	$tupleSize = shift @ARGV;	
}

if ($#ARGV >= 0) {
	$threshold = shift @ARGV;	
}
open(FILE1, "< $file1") || die "Unable to open file $file1. <$!>\n";
open(FILE2, "< $file2") || die "Unable to open file $file2. <$!>\n";
my $base = substr($file1,0,index($file1,"_p"));
my $p1 = $base."_p1";
my $p2 = $base."_p2";
my $up = $base."_up";
open (HQp1, "> $p1.hqs.fastq");
open (LQp1, "> $p2.lqs.fastq");
open (HTQp1, "> $p1.htqs.fastq");
open (HQp2, "> $p2.hqs.fastq");
open (LQp2, "> $p2.lqs.fastq");
open (HTQp2, "> $p2.htqs.fastq");
open (HQup, "> $up.hqs.fastq");
open (LQup, "> $up.lqs.fastq");
open (HTQup, "> $up.htqs.fastq");

print "Starting to process $file1 and $file2 with k-mer length $tupleSize and threshold $threshold...... \n";
while(read_entry())  {
	$p1_lowqual = 0;
	$p2_lowqual = 0;
	## convert to array
	my @qual1_arr = split '', $qual1;		
	my @qual2_arr = split '', $qual2;		
	$read_len  = length($seq1);	
	## iterate across the qualities	
	for($i1 = 0; $i1 < $read_len ; $i1++) {
		if(ord($qual1_arr[$i1]) - 64 < $threshold){
			$p1_lowqual = 1;			
			last;
		}
	}
	for($i2 = 0; $i2 < $read_len ; $i2++) {
		if(ord($qual2_arr[$i2]) - 64 < $threshold){
			$p2_lowqual = 1;			
			last;
		}
	}
	print STDOUT "i1 = ",$i1,"  i2 = $i2\n" if $debug; 
	if($p1_lowqual && $p2_lowqual){

		if ($i1 >= $tupleSize && $i2 >= $tupleSize) {
			print STDOUT "printing read1 with i1 = ",$i1," to HTQp1 and LQp1\n" if $debug;
			print STDOUT "printing read2 with i2 = ",$i2," to HTQp2 and LQp2\n" if $debug;
			print_seq(\*HTQp1,$name1,substr($seq1,0,$i1),substr($qual1,0,$i1));
			print_seq(\*HTQp2,$name2,substr($seq2,0,$i2),substr($qual2,0,$i2));
			print_seq(\*LQp1,$name1,$seq1,$qual1);
			print_seq(\*LQp2,$name2,$seq2,$qual2);
		} elsif ($i1 >= $tupleSize) {
			print_seq(\*HTQup,$name1,substr($seq1,0,$i1),substr($qual1,0,$i1));
			print_seq(\*LQup,$name2,$seq2,$qual2);
		} elsif ($i2 >= $tupleSize) {
			print_seq(\*HTQup,$name2,substr($seq2,0,$i2),substr($qual2,0,$i2));
			print_seq(\*LQup,$name1,$seq1,$qual1);
		} else {
			print STDOUT "printing read1 with i1 = ",$i1," to LQp1\n" if $debug;
			print STDOUT "printing read2 with i2 = ",$i2," to LQp2\n" if $debug;
			print_seq(\*LQp1,$name1,$seq1,$qual1);
			print_seq(\*LQp2,$name2,$seq2,$qual2);
		}
	} elsif ($p1_lowqual) {
		# LQp1 = low quality reads
		print_seq(\*LQup,$name1,$seq1,$qual1);
		#trim and put to htqs file
		print_seq(\*HTQup,$name1, substr($seq1,0,$i1), substr($qual1,0,$i1))	if ($i1 >= $tupleSize);		
		print_seq(\*HQup,$name2,$seq2,$qual2);
		print_seq(\*HTQup,$name2,$seq2,$qual2);
	} elsif ($p2_lowqual) {
		# LQp1 = low quality reads
		print_seq(\*LQup,$name2,$seq2,$qual2);
		#trim and put to htqs file
		print_seq(\*HTQup,$name2, substr($seq2,0,$i2), substr($qual2,0,$i2))	if ($i2 >= $tupleSize);		
		print_seq(\*HQup,$name1,$seq1,$qual1);
		print_seq(\*HTQup,$name1,$seq1,$qual1);
	} else {  
		print_seq(\*HQp1,$name1,$seq1,$qual1);
		print_seq(\*HQp2,$name2,$seq2,$qual2);
		print_seq(\*HTQp1,$name1,$seq1,$qual1);
		print_seq(\*HTQp2,$name2,$seq2,$qual2);
	}
	
}
	


close(FILE1);
close(FILE2);
close(HQp1);
close(LQp1);
close(HTQp1);
close(HQp2);
close(LQp2);
close(HTQp2);
close(HQup);
close(LQup);
close(HTQup);
print "Done...... \n";
exit 0;



sub read_entry() {
	
	$name1 = <FILE1> unless eof(FILE1);
	$name2 = <FILE2> unless eof(FILE2);  
	#read seq line

	$seq1 = <FILE1> unless eof(FILE1);
	chomp($seq1);
	$name1 = <FILE1> unless eof(FILE1);
	chomp($name1);
	$name1 = substr $name1,1 or return 0;
	$qual1 = <FILE1> unless eof(FILE1);;
	chomp($qual1) or return 0;

	$seq2 = <FILE2> unless eof(FILE2);
	chomp($seq2) or return 0;
	$name2 = <FILE2> unless eof(FILE2);
	chomp($name2) or return 0;
	$name2 = substr $name2,1 or return 0;
	$qual2 = <FILE2> unless eof(FILE2);
	chomp($qual2) or return 0;

	return 1;
}

sub print_seq($$$$) {
	my $file = shift;
	my $sn = shift;
	my $s = shift;
	my $q = shift;
	print $file "@",$sn,"\n";		
	print $file $s,"\n";
	print $file "+",$sn,"\n";
	print $file $q,"\n";
}
