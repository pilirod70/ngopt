#summary A tutorial for preprocessing of multiplexed Illumina reads with ngopt tools.

= Introduction =
This page will describe how to preprocess custom-barcode multiplexed Illumina data. 
= Prerequisites = 
You will need the following software in your executable path.
 * [http://genome.gsc.riken.jp/osc/english/dataresource/ TagDust] - eliminate artifactual sequence from NGS data
 * [http://code.google.com/p/ngopt/source/browse/trunk/tools/splitbc/splitBC?r=70 splitBC] - a script to split barcoded reads. Found in ngopt repository under trunk/tools/splitbc
If your reads are paired, you will also need the following program:
 * [http://code.google.com/p/ngopt/source/browse/trunk/tools/pair_reads/repair.cpp?r=85 repair] - a program for pairing and shuffling Illumina reads. Found in ngopt repository under trunk/tools/pair_reads

You will need the following sequence files:
 * [http://code.google.com/p/ngopt/source/browse/trunk/adapter.fasta?r=85 adapter.fasta] - Illumina adapter sequences.
 * a tab-delimited file with your barcode sequences. This file should look something like this:
 {{{
 BC1    ATGCTA
 BC2    TTGACT
 BC3    GTAGGT
 }}}
 * a single file containing all of your reads. They do not need to be shuffled if you have paired reads
= Preprocess Multiplexed Data =
== Remove Artifactual DNA ==
Often times during library preparations, DNA fragments consisting only of adapter sequence are inserted and sequenced. To get rid of reads containing these sequences, we will use the program `tagdust`. 
{{{
tagdust -o reads.clean.fastq -a reads.artifact.fastq adapters.fasta reads.fastq
}}}
where `reads.fastq` is our Illumina reads file. Reads without adapter sequence will be output to `reads.clean.fastq`
== Split Barcoded Reads == 
To split our barcoded data set, we will use the `splitBC` from ngopt. 
{{{
splitBC reads.clean.fastq --bcfile barcodes.txt --prefix ./ --suffix .fastq --bol 
}}}
A file will be created for each line in `barcodes.txt`. For example, if we used the example barcode file from above, we would now have *three* files, `BC1.fastq`, `BC2.fastq`, and `BC3.fastq`
== Re-pairing of Paired Reads ==
If you were processing paired-reads, your fastq files will likely contain broken pairings even if you shuffled them ahead of time. To fix this, you can use the `repair` program from ngopt. 
{{{
repair -p ./ -s .fastq BC1 BC1.fastq
}}}
This will produce *three* files in the current working directory: `BC1_p1.fastq`, `BC1_p2.fastq`, `BC1_up.fastq`.
`BC1_up.fastq` contains reads whose pair was removed due to contamination. 

If shuffled reads are desired, you can use the `--shuf` option for `repair`. `BC1_shuf.fastq` will be created instead of `BC1_p1.fastq` and `BC1_p2.fastq`

* To assemble paired reads, consider using the FastQtoDraftAssembly tutorial.