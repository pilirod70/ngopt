#summary A tutorial for assembling paired short reads generated on the Illumina platform

= Introduction =

Assembling genomes if fun


= Software Requirements = 
  * Java - Most computers already have Java installed.
  * Perl - Most computers already have Perl installed.
  * [http://code.google.com/p/ngopt/downloads/detail?name=ngopt_a5pipeline_linux-x86_64.tar.gz&can=2&q=#makechanges NGOpt pipeline]

= Data Requirements = 
  * One or more paired-end dataset in FastQ format in Illumina 1.3+ format
    * Single-end datasets may be included in addition to paired-end datasets

= Installing NGOpt pipeline =
After you download the archive from the link given above, extract the archive.
{{{
$ tar -xzf ngopt_pipeline_PLATFORM.tar.gz 
}}}
Now add `ngopt_pipeline_PLATFORM/bin/a5_pipeline.pl` to your executable path. You can also call the pipeline directly without adding it to your executable path.

= Assembling FastQ files = 
== Making Configuration File ==
The NGOpt pipeline takes two base arguments: an output basename, and a library file. The library file tells NGOptA5 where the FastQ files. Although it is not necessary, insert size estimates for paired libraries can be supplied in the configuration file. This estimate is used when assemblies are too poor to reliably estimate insert sizes. In addition, identifiers can be specified, however they are not necessary. 

Each library is delimited by a single line containing only the text  "`[LIB]`". Each piece of information for a library is given as a key-value pair on a single line by itself, where key and value are separated by a single equals sign, "`=`", with no intervening spaces. 
  * For paired-end libraries, the two ends can be in separate files, or shuffled in a single file. 
    * If the two ends are separate, specify paths to the files with the keys "`p1`" and "`p2`"
    * If the pairs are shuffled, specify path to shuffled file with the key "`shuf`"
  * For single-end libraries, or unpaired reads of a paired-end library, specify path to file with the key "'up'"
  * Specify insert sizes of libraries with key "`ins`"
  * Specify an identifier for a library of any type with the key "`id`"
  * No restrictions on naming conventions
*Example:*
{{{
[LIB]
id=pelib1
p1=pelib1_p1.fastq
p2=pelib1_p2.fastq
up=pelib1_up.fastq
ins=550
[LIB]
id=selib1
up=selib1.fq
[LIB]
id=pelib2
shuf=pelib2_shuf.fastq
ins=6000
[LIB]
id=pelib3
shuf=pelib3_shuf.fastq
up=pelib3_up.fastq
[LIB]
p1=pelib_p1.fastq
p2=pelib_p2.fastq
}}}
    
== Running assembly pipeline ==