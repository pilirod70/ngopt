#summary This page is under construction.

= Introduction =

This page will describe how create draft genome assemblies from raw Fastq reads. 

= Prerequisites = 
You will need the following packages/programs:
 * [http://aluru-sun.ece.iastate.edu/doku.php?id=reptile Reptile] - error-correction software 
 * [http://i.cs.hku.hk/~alse/hkubrg/projects/idba/ IDBA] - Iterative DeBruijn graph de novo assembler
 * [http://bio-bwa.sourceforge.net/ BWA] - short-read aligner using Burrows-Wheeler transform
 * [http://www.physics.rutgers.edu/~anirvans/SOPRA/ SOPRA] - statistical-optimization scaffolding
 * [http://code.google.com/p/ngopt/source/browse/trunk/tools/pair_reads/repair.cpp?r=70 repair] - pairs reads named using Illumina format sequence identifiers. Found in ngopt repository under trunk/tools/pair_reads
 * [http://code.google.com/p/ngopt/source/browse/trunk/tools/seqtools/rmctgs.cpp?r=70 rmctgs] - removes small contigs from Fasta file. Found in ngopt repository under trunk/tools/seqtools. 
 * [http://code.google.com/p/ngopt/source/browse/trunk/tools/assembly_line/scaf_sopra_bwa.sh?r=70 scaf_sopra_bwa.sh] - wrapper script for scaffolding with BWA and SOPRA. Found in ngopt repository under trunk/tools/assembly_line.
 * [http://code.google.com/p/ngopt/source/browse/trunk/tools/assembly_line/assembleIBS.sh?r=70 assembleIBS.sh] - runs IDBA-BWA-SOPRA pipeline. Found in ngopt repository under trunk/tools/assembly_line

= Assembling Paired Reads in FastQ format = 
== Before we get started... ==

 
 # You will need to shuffle your paired reads if they are not already shuffled. To do so, run *`repair`* like so:
{{{
repair --paired --shuf -s .fastq pe_shuf reads.fastq
}}} 
 where `pe_shuf` is the output basename for our shuffled reads. This will produce a file named `pe_shuf.fastq` in the current working directory.  The `-s` option or `repair`  can be used to output to a different directory.
== Reptile Error Correction == 
 # Convert Fastq to fasta+qual files. In the directory containing `pe_shuf.fastq`, run:
  {{{
  fastaq-converter.pl ./ ./  2 
  }}}
   This will create *two* files, `pe_shuf.fa` and `pe_shuf.q`
   Note: All files ending in .fastq in the current directory will be processed.
 # Copy and edit Reptile config-file template.
  {{{
  cp <path_to_reptile>/src/config~ ./pe_shuf.rec.conf
  vim pe_shuf.rec.conf
  }}}
 Edit `pe_shuf.rec.conf` to specify input and output files. 
   * Modify line beginning with "`InFaFile`"  to contain `pe_shuf.fa`
   * Modify line beginning with "`IQFile`" to contain `pe_shuf.q`  
   * Modify line beginning with "`OErrFile`" to contain the desired name of the output file. 
    * This output file will not be corrected reads. We are going to run another command on this file to get our corrected reads. Let's call the file `reptile-output` 
 If you are more educated in the Reptile Error Correction process, feel free to modify any of other run configurations. 
 # Run Reptile error correction
  {{{
  reptile pe_shuf.rec.conf
  reptile_merger pe_shuf.fa reptile-output pe_shuf.rec.fasta
  }}}
 Voila! Our corrected reads are now located in `pe_shuf.rec.fasta`
== Assemble Corrected Reads == 
{{{
assembleIBS.sh ibs_asm 10 5 pe_shuf.rec.fasta 500
}}}
 * `ibs_asm` is the basename for output files. It is also the name of the directory where all output files generated in the assembly line are stored.
 * the first integer argument, 10, is the minimum frequency of a k-mer in the DeBruijn graph
 * the second integer argument, 5, is the minimum number of pairs required to scaffold two contigs 
 * `pe_shuf.rec.fasta` is our shuffled file of error corrected reads
 * the third integer argument, 500, is the estimated insert size of your library.