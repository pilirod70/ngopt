#!/usr/bin/perl
### Filter the Reads with Q-scores. Separate into two files, One reads with high q-score, another low q-socre.
### Input : Threshold of q-score
###### Output: fastq format files
###					High q-score file (whole Reads or trimmed Reads, for building high q-score bloom filter)
###					High q-score file (whole Reads w/o the trimmed, subset of the above)
###					Low q-socre file (whole Reads)
###
### Definition of Low q-score Reads:
###              Reads with any bp in the reads with low quality (< threshold).
###

my($file,$i);
my($seqname, $seq,$seqname1, $qual,$read_len,$flag);
my $tupleSize = 25;
my $threshod = 25;
$discarded = 0;

if ($#ARGV < 0) {
  print "usage: trimfq readsFile k-mer_size quality_threshold\n";
  exit(0);
}

if ($#ARGV >= 0) {
	$file = shift @ARGV;	
}

if ($#ARGV >= 0) {
	$tupleSize = shift @ARGV;	
}

if ($#ARGV >= 0) {
	$threshod = shift @ARGV;	
}

open(FILE1, "< $file") || die "Unable to open file $file. <$!>\n";

my $idx = rindex($base,".fa");
if ($idx < 0) 
	$idx = rindex($base,".fq");
if ($idx < 0) 
	$idx = rindex($base,".txt");
my $base = substr($file,0,$idx);

open (FOut1, "> $base.hqs.fastq");
open (FOut2, "> $base.lqs.fastq");
open (FOut3, "> $base.htqs.fastq");

print "Starting to processing $file with k-mer length $tupleSize and threshold $threshod...... \n";
while( $seqname = <FILE1>) 
{
	$discarded = 0;
		
	#read seq line
	$seq = <FILE1>;
	chomp($seq);
	
	$seqname = <FILE1>;
	$qual = <FILE1>;
	chomp($qual);
	
	## convert to array
	@qual_arr = split '', $qual;		
	$read_len  = scalar split /|/,$seq;	
	
	for($i = 0; $i < $read_len ; $i++)
	{
		if(ord($qual_arr[$i]) - 64 < $threshod)
		{
			$discarded = 1;			
			last;
		}
	}
	
	if($discarded != 1)
	{
		print FOut1 "@";		
		print FOut1 substr $seqname, 1;	
		print FOut1 $seq;
		print FOut1 "\n";		
		print FOut1 $seqname;
		print FOut1 $qual;
		print FOut1 "\n";
		
		
		print FOut3 "@";		
		print FOut3 substr $seqname, 1;	
		print FOut3 $seq;
		print FOut3 "\n";		
		print FOut3 $seqname;
		print FOut3 $qual;
		print FOut3 "\n";
	}
	else
	{
		print FOut2 "@";
		print FOut2 substr $seqname, 1;					
		print FOut2 $seq;	
		print FOut2 "\n";
		print FOut2 $seqname;	
		print FOut2 $qual;
		print FOut2 "\n";
		
		#trim and put to htqs file
		for($i = 0; $i < $read_len ; $i++)
		{
				if(ord($qual_arr[$i]) - 64 < $threshod)
				{					
					last;
				}
		}
		if ($i >= $tupleSize)
		{
			print FOut3 "@";
			print FOut3 substr $seqname, 1;
			print FOut3 substr $seq,0,$i;
			print FOut3 "\n";
			print FOut3 $seqname;	
			print FOut3 substr $qual,0,$i;
			print FOut3 "\n";
		}
		
	}
	
}
	

close(FILE1);
close(FOut1);
close(FOut2);
close(FOut3);
print "Done...... \n";
exit 0
