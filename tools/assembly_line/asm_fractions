#!/usr/bin/perl

use strict;
use warnings;
sub usage();
if (@ARGV < 10) {
	print STDOUT usage(),"\n";
	exit -1;
}
my $base = shift @ARGV; 
my @ppln_args = (1..9);
for (my $i=0;$i<@ppln_args;$i++){
	$ppln_args[$i]=shift(@ARGV);
} 
print STDOUT "Subsampling $base at the following fractions: @ARGV","\n";
print STDOUT "Running pipeline with the following arguments:\n\t @ppln_args\n";
my $kmer_freq_cut = $ppln_args[3];
my $max_rd_hits = $ppln_args[6];
my $min_pairs = $ppln_args[6];
my $cmd = "wc -l $base"."_p1.fastq";
# print STDOUT $cmd,"\n";
my $lc=`$cmd`;
$lc = substr($lc,0,(index($lc," ")));
$lc = $lc/4;
#exit 1;

foreach my $frac (@ARGV) {
	my $idx = index $frac, "/";
	if ($idx >= 0) {
		my ($num,$den) = split (/\//, $frac);
		print STDOUT "num = $num\nden = $den\n";
		$frac = $num/$den; 
	}
	my $perc = 100*$frac;
	$perc = sprintf("%.1g",$perc);
	print STDOUT "Assembling ",$perc," % of the data\n";
	my $fmtd = sprintf("%.6g", $frac);
	my $ppln_base = $base."-".$fmtd;
	$ppln_args[3] = sprintf("%.0f",$kmer_freq_cut*$frac);
	$ppln_args[5] = sprintf("%.0f",$max_rd_hits*$frac);
	$ppln_args[6] = sprintf("%.0f",$min_pairs*$frac);
	my @args = ("-nreads",$lc,$base, $frac);
	`java -cp /home/atritt/jar_files SampleReads @args > $base-smpl_$fmtd.out 2> $base-smpl_$fmtd.err`; 
	@args = ($ppln_base,@ppln_args); 
	print STDOUT "$fmtd : @args\n";
	`pipeline @args > $base-ppln_$fmtd.out 2> $base-ppln_$fmtd.err`; 
}

sub usage() {
	my $usg = "Usage: asm_fractions <pipeline_arguments> <list_of_fractions>";
	return $usg;
}
